<title>A brief description of the Calculon language</title>

<h3>Introduction</h3>

The Calculon language is extremely simple. There are three types, <code>real</code>,
<code>vector</code> and <code>boolean</code>. Everything is explicitly typed
(except that if you omit a type specifier, you get <code>real</code>.
Everything is an expression. Variables are immutable and looping must be done
via recursion.

The simplest way to think about a Calculon script is as a series of let
statements followed by a return, but the details are a bit more complicated
than that.

The following list describes the major syntactic elements:

  *  <code>0</code> is a real constant.
  *  <code>true</code> or <code>false</code> are boolean constants.
  *  <code>return</code> must be the last keyword in a Calculon script. When
     seen, any output parameters are set and the scripts exit. You cannot
	 use this inside a function.
  *  <code>&#91;0, 1, 2]</code> is a vector. The elements must be reals (but
     need not be constant). You may supply any positive, non-zero number of
     elements. The size of a vector is part of its type; vectors of different
     sizes are not compatible.
  *  <code>&#91;*4 2]</code> is also a vector; this has four elements, all of
     which are set to 2. The size of the vector must be a constant (but the
     value does not need to be).
  *  <code>sqrt(2)</code> calls a function. Functions may take any number of
     parameters, of any type, and return a single parameter, of any type.
     Functions are not polymorphic.
  *  <code>V.x, V.y, V.z, V.w</code> extract the first four elements from a
     vector. (Obviously assuming the vector has enough elements.) An out of
     bound access is a compile time error.
  *  <code>V&#91;n]</code> extracts the <code>n</code>th element of a vector.
     If the vector is square --- e.g. four, nine or sixteen elements --- you
     may also use <code>V&#91;x, y]</code> to extract a given element by
     coordinate. The elements are stored in row-major order. Out of bound
     indices wrap.
  *  <code>V.length</code> returns the number of elements in a vector. 
  *  <code>V.sum</code> computes the sum of all elements in the vector. (You
     can calculate the Pythagorean magnitude of a vector with
     <code>sqrt(V*V)</code>, of course.)
  *  <code>let i = 1 in expr</code> defines a variable that becomes
     available when evaluating <code>expr</code>. The new variable is does
     not have an explicit type and its type is inferred from its definition.
  *  <code>let v: vector*3 = &#91;0, 1, 2] in expr</code> defines a variable
     that becomes available when evaluating <code>expr</code>. The new
     variable is explicitly typed and if you try to define a variable with a
     type that differs from its declaration you will get an error. You must
     specify the size of vectors.
  *  <code>let f(v1:vector*3, v2:vector*3):vector*3 = v1 + v2 in expr</code>
     defines a function. The new function is available both when evaluating
     <code>expr</code> <b>and</b> inside the function body, which allows
     recursion. Note that the scoping rules here are different to when you
     define a variable! Also note that type inference is <i>not</i> done on
     functions!
  *  <code>if booleanvalue then truevalue else falsevalue</code> does 
     conditional evaluation. If <code>booleanvalue</code> is <code>true</code>
     then <code>truevalue</code> is evaluated; otherwise
     <code>falsevalue</code> is evaluated. Both must have the same type.

In addition the usual set of infix and prefix operators are available:

  *  For <b>booleans</b>: <code>==</code>, <code>!=</code>,
     <code>and</code>, <code>or</code>, <code>not</code>. <code>and</code>
     and <code>or</code> are short-circuiting.
  *  For <b>vectors</b>: <code>==</code>, <code>!=</code>, <code>+</code>,
     <code>-</code>, <code>*</code>, <code>/</code>. the
     operation is applied to each component. If you're doing this, both
     parameters must have the same sized vector. For non-conditionals, if
     you pass a real as the second parameter, then that value is applied to all
     components. 
  *  For <b>reals</b>: all the usual C-like operators. Complain if you find 
     any missing.

The order of precedence, from highest to lowest, is: unary operators,
multiplication and division, addition and subtraction, comparisons, boolean
operators, <code>if</code>...<code>then</code>...<code>else</code>,
<code>let</code>.

The type signatures used for Calculon <i>scripts</i> is subtly different from
the type signatures used for Calculon <i>functions</i>. Functions may return
only one value, and their signatures look like this:

<verbatim>(x:real, y:real): vector*2</verbatim>

Scripts may return any number of parameters, and their signatures look like
this:

<verbatim>(x:real, y:real): (v:vector*2, length:real)</verbatim>

It is perfectly acceptable for output parameters to have the same name as an
input parameter (or a global variable).

Most of the standard maths library is bound. They all behave exactly like
their Posix namesakes. As of writing, the list consists of:

  *  <code>acos()</code>
  *  <code>acosh()</code>
  *  <code>asin()</code>
  *  <code>asinh()</code>
  *  <code>atan()</code>
  *  <code>atan2()</code>
  *  <code>atanh()</code>
  *  <code>cbrt()</code>
  *  <code>ceil()</code>
  *  <code>copysign()</code>
  *  <code>cos()</code>
  *  <code>cosh()</code>
  *  <code>erf()</code>
  *  <code>erfc()</code>
  *  <code>exp()</code>
  *  <code>exp2()</code>
  *  <code>expm1()</code>
  *  <code>fabs()</code>
  *  <code>fdim()</code>
  *  <code>floor()</code>
  *  <code>fma()</code>
  *  <code>fmax()</code>
  *  <code>fmin()</code>
  *  <code>fmod()</code>
  *  <code>hypot()</code>
  *  <code>j0()</code>
  *  <code>j1()</code>
  *  <code>lgamma()</code>
  *  <code>log()</code>
  *  <code>log10()</code>
  *  <code>log1p()</code>
  *  <code>log2()</code>
  *  <code>logb()</code>
  *  <code>nearbyint()</code>
  *  <code>pow()</code>
  *  <code>remainder()</code>
  *  <code>rint()</code>
  *  <code>round()</code>
  *  <code>sin()</code>
  *  <code>sinh()</code>
  *  <code>sqrt()</code>
  *  <code>tan()</code>
  *  <code>tgamma()</code>
  *  <code>trunc()</code>
  *  <code>y0()</code>
  *  <code>y1()</code>

