<title>Using the Calculon library</title>

<h3>Introduction</h3>

The Calculon library is extremely simple. It is supplied as a set of
headers; to use the library, create a type instance of the compiler, create
the global symbol table, and then you can instantiate functions. If compiling
a script fails, an exception is thrown. If that succeeds, you have an object
which you can just call.

Here is an annotated example.

<verbatim>
/* Create the type instance, and pull some useful types out of it */
typedef Calculon::Instance<Calculon::RealIsDouble> Compiler;
typedef Compiler::Real Real;
typedef Compiler::Vector<3> Vector3;

/* Create the symbol table */
Compiler::StandardSymbolTable symbols;
 
/* Open the script file */
std::ifstream scriptSource("script.cal");

/* Prototype the function that the script represents, and compile the
 * script. We pass in the Calculon type signature of the function so the
 * compiler knows what parameters we're using */
typedef Real ScriptFunction(Real x, Real y);
Compiler::Program<ScriptFunction> function(symbols, code,
    "(x:real, y:real): real");
     
/* Call the function */

Real result = function(1, -1);
</verbatim>

...and that's pretty much it. <code>function()</code> may be called as
many times as you like and is thread-safe. When it goes out of scope it will
be destroyed.

<h3>Configurations</h3>

Right now there are two forms of the Calculon compiler you can use. This:

<verbatim>
typedef Calculon::Instance<Calculon::RealIsDouble> Compiler;
</verbatim>

...and this:

<verbatim>
typedef Calculon::Instance<Calculon::RealIsFloat> Compiler;
</verbatim>

These control whether Calculon's <code>real</code> type is a
single-precision or double-precision. There may be more configurations in
the future.

You can use both at the same time, if you wish.

<h3>Vectors</h3>

The <code>Compiler::Vector&lt;&gt;</code> template refers to a vector with
the specified number of parameters. It ensures that the correct alignment is
used (which is <i>very important</i>, or else your script will run very badly
or produce the wrong results).

It has an <code>m&#91;]</code> member which provides access to the members of
the vector. Dereference them at your will. Sorry, they can't be initialised via
initialisation lists: you have to assign to their members. (If anyone knows
how to force C++ to allow this, please get in touch.)

Vectors which are 1, 2, 3 or 4 elements long may also be derefenced via
<code>x</code>, <code>y</code>, <code>z</code> and <code>w</code>, as
appropriate.

<h3>Calling conventions</h3>

Alas, the mapping between C++ parameters and Calculon parameters is not
quite obvious.

Calculon reals are available as <code>Compiler::Real</code>, and Calculon
vectors as the appropriate kind of <code>Compiler::Vector</code>. Reals are
passed in the obvious way, as in the example above. However, vectors are
passed by pointer. If the Calculon script returns a vector, then an extra
initial parameter is added which points to where the return parameter should
be written.

For example:

<verbatim>
/* f1(x: real, y: real, v: vector*3): real */
typedef Real f1(Real x, Real y, Compiler::Vector<3>* v);

/* f2(x: real, y: real, v: vector*3): vector*2 */
typedef void f2(Compiler::Vector<2>* result, Real x, Real y, Compiler::Vector<3>* v);
</verbatim>

To call such a function, create some Vector objects somewhere and pass
their pointers in. The stack will do fine.

<verbatim>
Compiler::Vector<2> result;
Compiler::Vector<3> v;
v.x = 0; v.y = 1; v.z = 2;
f2(&result, 7, 8, &v);
</verbatim>

<h3>Registering functions</h3>

Functions may be trivially added to the symbol table. (You may create as
many symbol tables as you wish; the symbol table is only ever used during the
compilation process. Symbol tables are not thread safe!)

<verbatim>
extern "C"
double perlin(Compiler::Vector<3>* v)
{
	return ...
}

Compiler::StandardSymbolTable symbols;
symbols.add("perlin", "(vector*3): double", perlin);
</verbatim>

The first parameter specifies the name; the second parameter gives the type
signature of the function; the third parameter is the function to call. The
function does not need to be <code>extern "C"</code> but it's a good idea to
avoid edge cases.

The type signature uses a similar syntax to Calculon type signatures, but
without function names. <code>real</code> must be explicitly specified.
<code>float</code> and <code>double</code> are valid here, and cause Calculon
to automatically convert between the representation of <code>real</code> that
it is using internally to your platform's float or double types. (If you
specify <code>real</code>, ensure that your external function uses
<code>Compiler::Real</code> as its parameter type.)

<b>If you make a mistake here, really bad things happen.</b> There is no way
for Calculon to detect whether the function signature is correct or not, and
it just trusts you. If you get it wrong, you may get garbage data or crashes.

Vectors are passed in and out in the same way as for Calculon scripts.

Note carefully! Calculon is designed for scripts that have <b>no side
effects</b>. If you call out to a function which does something... well, it'll
work, but the Calculon compiler is allowed to assume that if it calls the
function once with a set of parameters, it can call it again with the same
parameters and get the same result. Be careful. (And don't forget that
<code>rand()</code> has side effects.)

<h3>Registering values</h3>

You may also register real and vector global variables in the symbol table.
This is useful for simple constants that won't change between runs of the Calculon
script (such as: size of the output image, position of various objects in 3D
space, etc).

<verbatim>
Compiler::StandardSymbolTable symbols;
symbols.add("fortytwo", 42);
symbols.add("pi", M_PI);

vector<double> v(4);
v[0] = 1; v[1] = 2; v[2] = 3; v[3] = 4;
symbols.add("v", v);
</verbatim>

These values are compiled as literal into the output machine code, which means
they are fast. However, one the script has been compiled, they cannot be
changed. Use input parameters if you need to do this.

<h3>Dependencies</h3>

The Calculon library uses the STL and iostreams. It does use some Boost, but
does not use C++11, for maximum compatibility. Fairly obviously, it uses
LLVM 3.2. It may or may not work with other versions of LLVM. (If you need it
to work on another version, please <a href="mailto:dg@cowlark.com">get in
touch</a>.)

The supplied <a href="../Makefile">sample Makefile</a> shows the recommended
way to build programs that use Calculon, but the short summary is:

<verbatim>
g++ -I$(shell llvm-config-3.2 --includedir) -lLLVM-3.2 program.cc
</verbatim>

Calculon works with both gcc and clang++. I haven't tried with Visual
Studio (I'd appreciate any reports of workingness or otherwise).

<h2 class='comments-title'>Comments on this page</h2>
<table class='comments' border='0'><tr>
<td id='commentator-viewer'></td>
<td id='commentator-poster'></td>
</tr></table>

